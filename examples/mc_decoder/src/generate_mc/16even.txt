metrics_vec[1][c_num * path + 0] = metrics [path]; // empty
metrics_vec[1][c_num * path + 1] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[1]); // e+a0+a1
if (n_elmts >= 4)
{
	metrics_vec[1][c_num * path + 2] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[2]); // e+a0+a2
	metrics_vec[1][c_num * path + 3] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[3]); // e+a0+a3
	metrics_vec[1][c_num * path + 4] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[1] + pen[2]); // e+a1+a2
	metrics_vec[1][c_num * path + 5] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[1] + pen[3]); // e+a1+a3
	metrics_vec[1][c_num * path + 6] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[2] + pen[3]); // e+a2+a3
	metrics_vec[1][c_num * path + 7] = sat_m<R>(metrics_vec[1][c_num * path + 1] + pen[2] + pen[3]); // e+a0+a1+a2+a3
if (n_elmts >= 8)
{
		metrics_vec[1][c_num * path + 8] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[4]); // e+a0+a4
		metrics_vec[1][c_num * path + 9] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[5]); // e+a0+a5
		metrics_vec[1][c_num * path + 10] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[6]); // e+a0+a6
		metrics_vec[1][c_num * path + 11] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[7]); // e+a0+a7
		metrics_vec[1][c_num * path + 12] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[1] + pen[4]); // e+a1+a4
		metrics_vec[1][c_num * path + 13] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[1] + pen[5]); // e+a1+a5
		metrics_vec[1][c_num * path + 14] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[1] + pen[6]); // e+a1+a6
		metrics_vec[1][c_num * path + 15] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[1] + pen[7]); // e+a1+a7
		metrics_vec[1][c_num * path + 16] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[2] + pen[4]); // e+a2+a4
		metrics_vec[1][c_num * path + 17] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[2] + pen[5]); // e+a2+a5
		metrics_vec[1][c_num * path + 18] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[2] + pen[6]); // e+a2+a6
		metrics_vec[1][c_num * path + 19] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[3] + pen[4]); // e+a3+a4
		metrics_vec[1][c_num * path + 20] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[3] + pen[5]); // e+a3+a5
		metrics_vec[1][c_num * path + 21] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[4] + pen[5]); // e+a4+a5
		metrics_vec[1][c_num * path + 22] = sat_m<R>(metrics_vec[1][c_num * path + 1] + pen[2] + pen[4]); // e+a0+a1+a2+a4
		metrics_vec[1][c_num * path + 23] = sat_m<R>(metrics_vec[1][c_num * path + 1] + pen[2] + pen[5]); // e+a0+a1+a2+a5
		metrics_vec[1][c_num * path + 24] = sat_m<R>(metrics_vec[1][c_num * path + 1] + pen[3] + pen[4]); // e+a0+a1+a3+a4
		metrics_vec[1][c_num * path + 25] = sat_m<R>(metrics_vec[1][c_num * path + 2] + pen[3] + pen[4]); // e+a0+a2+a3+a4
		metrics_vec[1][c_num * path + 26] = sat_m<R>(metrics_vec[1][c_num * path + 4] + pen[3] + pen[4]); // e+a1+a2+a3+a4
if (n_elmts >= 16)
{
			metrics_vec[1][c_num * path + 27] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[8]); // e+a0+a8
			metrics_vec[1][c_num * path + 28] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[9]); // e+a0+a9
			metrics_vec[1][c_num * path + 29] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[10]); // e+a0+a10
			metrics_vec[1][c_num * path + 30] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[11]); // e+a0+a11
			metrics_vec[1][c_num * path + 31] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[12]); // e+a0+a12
			metrics_vec[1][c_num * path + 32] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[13]); // e+a0+a13
			metrics_vec[1][c_num * path + 33] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[14]); // e+a0+a14
			metrics_vec[1][c_num * path + 34] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[0] + pen[15]); // e+a0+a15
			metrics_vec[1][c_num * path + 35] = sat_m<R>(metrics_vec[1][c_num * path + 0] + pen[1] + pen[8]); // e+a1+a8



switch( dup )
{
case 0:
	// nothing to do
	break;
case 1:// e + a0 + a1 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
case 2:// e + a0 + a2 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +2]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +2]] ? 0 : b;
	break;
case 3:// e + a0 + a3 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +3]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +3]] ? 0 : b;
	break;
case 4:// e + a1 + a2 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +2]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +2]] ? 0 : b;
	break;
case 5:// e + a1 + a3 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +3]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +3]] ? 0 : b;
	break;
case 6:// e + a2 + a3 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +2]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +2]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +3]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +3]] ? 0 : b;
	break;
case 7:// e + a0 + a1 + a2 + a3 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +2]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +2]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +3]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +3]] ? 0 : b;
	break;
case 8:// e + a0 + a4 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +4]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +4]] ? 0 : b;
	break;
case 9:// e + a0 + a5 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +5]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +5]] ? 0 : b;
	break;
case 10:// e + a0 + a6 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +6]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +6]] ? 0 : b;
	break;
case 11:// e + a0 + a7 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +7]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +7]] ? 0 : b;
	break;
case 12:// e + a1 + a4 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +4]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +4]] ? 0 : b;
	break;
case 13:// e + a1 + a5 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +5]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +5]] ? 0 : b;
	break;
case 14:// e + a1 + a6 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +6]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +6]] ? 0 : b;
	break;
case 15:// e + a1 + a7 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +7]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +7]] ? 0 : b;
	break;
case 16:// e + a2 + a4 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +2]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +2]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +4]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +4]] ? 0 : b;
	break;
case 17:// e + a2 + a5 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +2]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +2]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +5]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +5]] ? 0 : b;
	break;
case 18:// e + a2 + a6 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +2]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +2]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +6]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +6]] ? 0 : b;
	break;
case 19:// e + a3 + a4 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +3]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +3]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +4]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +4]] ? 0 : b;
	break;
case 20:// e + a3 + a5 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +3]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +3]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +5]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +5]] ? 0 : b;
	break;
case 21:// e + a4 + a5 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +4]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +4]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +5]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +5]] ? 0 : b;
	break;
case 22:// e + a0 + a1 + a2 + a4 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +2]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +2]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +4]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +4]] ? 0 : b;
	break;
case 23:// e + a0 + a1 + a2 + a5 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +2]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +2]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +5]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +5]] ? 0 : b;
	break;
case 24:// e + a0 + a1 + a3 + a4 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +3]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +3]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +4]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +4]] ? 0 : b;
	break;
case 25:// e + a0 + a2 + a3 + a4 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +2]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +2]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +3]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +3]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +4]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +4]] ? 0 : b;
	break;
case 26:// e + a1 + a2 + a3 + a4 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +2]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +2]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +3]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +3]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +4]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +4]] ? 0 : b;
	break;
case 27:// e + a0 + a8 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +8]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +8]] ? 0 : b;
	break;
case 28:// e + a0 + a9 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +9]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +9]] ? 0 : b;
	break;
case 29:// e + a0 + a10 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +10]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +10]] ? 0 : b;
	break;
case 30:// e + a0 + a11 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +11]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +11]] ? 0 : b;
	break;
case 31:// e + a0 + a12 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +12]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +12]] ? 0 : b;
	break;
case 32:// e + a0 + a13 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +13]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +13]] ? 0 : b;
	break;
case 33:// e + a0 + a14 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +14]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +14]] ? 0 : b;
	break;
case 34:// e + a0 + a15 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +0]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +0]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +15]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +15]] ? 0 : b;
	break;
case 35:// e + a1 + a8 
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +1]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +1]] ? 0 : b;
	break;
	s[new_path][off_s + bit_flips_r1[bits_num * old_path +8]] = s[old_path][off_s + bit_flips_r1[bits_num * old_path +8]] ? 0 : b;
	break;
default:
	throw tools::runtime_error(__FILE__, __LINE__, __func__, "Flip bits error on rate 1 node.");
	break;
}